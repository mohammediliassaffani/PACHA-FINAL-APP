import { defineConfig } from 'vite';
import { z } from 'zod';
import react from '@vitejs/plugin-react-swc';
import path from 'node:path';
import { normalizePath } from 'vite';
import { viteStaticCopy } from 'vite-plugin-static-copy';
import dotenv from 'dotenv';
import fs from 'fs';
import viteTsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig(({ mode }) => {
  const APP_ENV = process.env.APP_ENV || 'development';
  const envPath = path.resolve(__dirname, `.env.${APP_ENV}`);

  // Load the environment variables from the specified file
  const envResult = dotenv.config({ path: envPath });

  if (envResult.error) {
    console.error(`❌ Failed to load ${envPath}:`, envResult.error);
    process.exit(1);
  }

  const env = envResult.parsed || {};

  // Define client variables schema
  const clientSchema = z.object({
    VITE_APP_ENV: z.enum(['development', 'staging', 'production']),
    VITE_API_URL: z.string().url(),
    VITE_VAR_NUMBER: z.coerce.number(),
    VITE_VAR_BOOL: z.coerce.boolean(),
  });

  // Define server variables schema
  const serverSchema = z.object({
    SECRET_KEY: z.string(),
  });

  // Prepare environment variables for validation
  const fullEnv = {
    ...process.env,
    ...env,
  };

  // Validate client variables
  const clientEnvResult = clientSchema.safeParse(fullEnv);
  if (!clientEnvResult.success) {
    console.error(
      '❌ Invalid client environment variables:',
      clientEnvResult.error.flatten().fieldErrors
    );
    process.exit(1);
  }

  // Validate server variables
  const serverEnvResult = serverSchema.safeParse(fullEnv);
  if (!serverEnvResult.success) {
    console.error(
      '❌ Invalid server environment variables:',
      serverEnvResult.error.flatten().fieldErrors
    );
    process.exit(1);
  }

  // Destructure the validated data
  const clientEnv = clientEnvResult.data;
  const serverEnv = serverEnvResult.data;

  // Generate env.generated.ts
  const envFileContent = `
// This file is generated automatically by vite.config.ts
// Do not edit this file manually

const Env = ${JSON.stringify(clientEnv, null, 2)} as const;

export default Env;
`;

  fs.writeFileSync('./src/env.generated.ts', envFileContent);

  return {
    plugins: [
      react(),
      viteTsconfigPaths(),
      viteStaticCopy({
        targets: [
          {
            src: normalizePath(path.resolve('./src/assets/locales')),
            dest: normalizePath(path.resolve('./dist')),
          },
        ],
      }),
    ],
    resolve: {
      alias: {
        '@': path.resolve(__dirname, './src'),
        '@env': path.resolve(__dirname, './src/env.generated.ts'),
      },
    },
    server: {
      host: true,
      strictPort: true,
      port: 3001,
    },
    define: {
      'process.env.SECRET_KEY': JSON.stringify(serverEnv.SECRET_KEY),
    },
    test: {
      environment: 'jsdom',
      setupFiles: ['./vitest.setup.ts'],
      css: true,
    },
  };
});
